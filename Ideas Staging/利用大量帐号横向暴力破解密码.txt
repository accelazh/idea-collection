在以往，对于一个帐号，如果我想要暴力破解其密码，设密码空间大小为M。服务器防范的方法是：1)每次密码验证强行等待几秒，以避免hacker快速尝试大量密码，例子如linux login。2) 多次尝试密码不通过，冻结账户。通过上述两种方法，即使是弱密码，也很难被暴力破解。但是，就单个计算机而言，是有能力完成暴力破解的计算量。而且，这种保护下市场上必定大量流形弱密码。

现在，我提出一种新型暴力破解法。首先我拥有大量帐号，帐号总数N（事实上帐号瞎拼的都可以）。设密码空间大小为M。一次密码尝试为，对每个帐号，尝试一个不相同的密码。基于已有足够多的帐号，一次密码尝试碰中一个帐号的概率如下

  { 1/M * [(M-1)/M]^(N-1) } * N = N/M * [(M-1)/M]^(N-1)

可以看到，相对于单账户暴力破解一次尝试的碰中概率1/M，N账户同时尝试一次的概率近似被放大了N倍。如果账户数量巨大，破解的可能性很可观。这还只是单次尝试，另一方面，这种破解方法绕开了单个账户破解时，login等待和账户冻结的问题，你可尝试多次，或者每天一次。发动这样的破解需要大量肉鸡、不同ip的参与，在中国或者云计算时代是有这样的条件的。

  实际计算：
    def hack(n, m):   # python
      b = pow(1-1.0/m, n-1)
      a= n*1.0/m
      return a*b

    N=1000,000，M=pow(10, 6)（银行6位数字密码）。概率0.368。招商银行的查询密码可以网上直接登录，貌似能破解。
    N=10,000,000，M=pow(100, 6)（短强密码），概率约为N/M=1e-05。
    N=1000,000，M=pow(26, 8)（弱密码），概率约为0.00323
      
  附：招商银行查询密码登录https://pbsz.ebank.cmbchina.com/CmbBank_GenShell/UI/GenShellPC/Login/Login.aspx。信用卡的6位数字密码也符合这种破解方法。

  如果在同一个ip地址发送大量密码尝试，无疑会被ban。可以考虑源ip伪造的办法。如果已经有一个肉鸡网络，把密码尝试分散到大量肉鸡上，那么就省事得多，还可以伪装成普通用户登录。如果没有肉鸡网络的话，用跨站脚本攻击让大量用户帮你执行代码也可以。还可以群发邮件，伪装的链接点击后，让用户帮你执行代码。最后还可以挂在云上，或者einstein at home这样的分布式计算系统上。


