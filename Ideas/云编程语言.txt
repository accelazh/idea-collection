	现在的编程语言的发展趋势是，凡是程序中能够公用的、被抽取出来的东西，首先变成这门语言的库、框架，然后诞生新语言，把这些公共物融进语法、变得非常方便易用。
	例如，Java的时候，连接数据库都还是需要用一堆库，手动编写代码。到了PHP，恨不得就一个函数调用就解决了，对数据库的连接已经不再 被视为“语言之外，通过库实现”的东西了，而是语言语法里就给处理好了。

	一个程序实际上会依赖许多方面的服务，以现在的趋势这些服务也逐渐被抽取出来，变成独立于语言的东西：
		比如，NoSQL持久数据存储：mongoDB
		内存存储：memcached、redis
		关系持久存储：MySQL
		消息服务：RabbitMQ
		分布式Job计算：Hadoop
		Web服务器横向扩展、HA
		数据库服务器横向扩展、HA
		软件模块的版本控制、升级，并且保证软件不中断服务
		……

	PaaS瞅见了这一先机，许多服务被放到PaaS平台中，由它直接提供给程序开发者、提供给编程语言。这些东西不需要开发者自己去架设，变成了AOP的东西。
	那么下一步，让PaaS的服务融进语法。

	创造一门新的语言，改变它的语法，让其更加专性化发展，让PaaS的这些服务融进它的语法中，方便地使用，不再需要额外配置、架设，就像把原来的库融进新语言的语法中一样。现在如果你去做GoogleApp、AWS、CloudFoundry这样的PaaS平台上的程序，你还得给IDE装插件、上传代码，调试和运行都很麻烦。新语言里，这些都被语言本身解决了，没有任何麻烦，甚至难以被察觉存在，用起来和在本地写几行脚本没区别。

	一切可以被切面的东西，都将融进语法。